{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nexport default {\n  name: \"UserView\",\n  data() {\n    return {\n      searchName: \"\",\n      // 搜索输入的姓名\n      employees: [\n      // 假数据：社员列表\n      {\n        id: 1,\n        name: \"山田太郎\",\n        email: \"yamada@example.com\",\n        department: \"IT部門\"\n      }, {\n        id: 2,\n        name: \"鈴木花子\",\n        email: \"suzuki@example.com\",\n        department: \"営業部\"\n      }, {\n        id: 3,\n        name: \"田中一郎\",\n        email: \"tanaka@example.com\",\n        department: \"総務部\"\n      }],\n      filteredEmployees: [] // 筛选后的社员数据\n    };\n  },\n  methods: {\n    // 筛选社员数据\n    filterEmployees() {\n      // 如果输入为空，直接清空表格\n      if (!this.searchName.trim()) {\n        this.filteredEmployees = [];\n        return;\n      }\n      // 过滤社员数据\n      this.filteredEmployees = this.employees.filter(employee => employee.name.includes(this.searchName.trim()));\n\n      // 如果没有匹配的数据，清空表格\n      if (this.filteredEmployees.length === 0) {\n        this.filteredEmployees = [];\n      }\n    }\n  },\n  mounted() {\n    // 初始状态：不显示数据\n    this.filteredEmployees = [];\n  }\n};","map":{"version":3,"names":["name","data","searchName","employees","id","email","department","filteredEmployees","methods","filterEmployees","trim","filter","employee","includes","length","mounted"],"sources":["src/views/UserView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>社員一覧画面</h2>\r\n\r\n    <!-- 検索条件 -->\r\n    <el-row>\r\n      <el-col :span=\"8\">\r\n        <el-input\r\n          v-model=\"searchName\"\r\n          placeholder=\"社員名をご入力ください。\"\r\n          @input=\"filterEmployees\"\r\n          clearable>\r\n          <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"filterEmployees\"></el-button>\r\n        </el-input>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 数据表格 -->\r\n    <el-table :data=\"filteredEmployees\" border style=\"margin-top: 20px\">\r\n      <el-table-column prop=\"id\" label=\"ID\" width=\"80\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"名前\"></el-table-column>\r\n      <el-table-column prop=\"email\" label=\"メール\"></el-table-column>\r\n      <el-table-column prop=\"department\" label=\"部門\"></el-table-column>\r\n    </el-table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"UserView\",\r\n  data() {\r\n    return {\r\n      searchName: \"\", // 搜索输入的姓名\r\n      employees: [\r\n        // 假数据：社员列表\r\n        { id: 1, name: \"山田太郎\", email: \"yamada@example.com\", department: \"IT部門\" },\r\n        { id: 2, name: \"鈴木花子\", email: \"suzuki@example.com\", department: \"営業部\" },\r\n        { id: 3, name: \"田中一郎\", email: \"tanaka@example.com\", department: \"総務部\" },\r\n      ],\r\n      filteredEmployees: [], // 筛选后的社员数据\r\n    };\r\n  },\r\n  methods: {\r\n    // 筛选社员数据\r\n    filterEmployees() {\r\n      // 如果输入为空，直接清空表格\r\n      if (!this.searchName.trim()) {\r\n        this.filteredEmployees = [];\r\n        return;\r\n      }\r\n      // 过滤社员数据\r\n      this.filteredEmployees = this.employees.filter((employee) =>\r\n        employee.name.includes(this.searchName.trim())\r\n      );\r\n\r\n      // 如果没有匹配的数据，清空表格\r\n      if (this.filteredEmployees.length === 0) {\r\n        this.filteredEmployees = [];\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    // 初始状态：不显示数据\r\n    this.filteredEmployees = [];\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.el-input {\r\n  margin-bottom: 20px;\r\n}\r\n</style>\r\n"],"mappings":";;AA4BA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;MAAA;MACAC,SAAA;MACA;MACA;QAAAC,EAAA;QAAAJ,IAAA;QAAAK,KAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,EAAA;QAAAJ,IAAA;QAAAK,KAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,EAAA;QAAAJ,IAAA;QAAAK,KAAA;QAAAC,UAAA;MAAA,EACA;MACAC,iBAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,gBAAA;MACA;MACA,UAAAP,UAAA,CAAAQ,IAAA;QACA,KAAAH,iBAAA;QACA;MACA;MACA;MACA,KAAAA,iBAAA,QAAAJ,SAAA,CAAAQ,MAAA,CAAAC,QAAA,IACAA,QAAA,CAAAZ,IAAA,CAAAa,QAAA,MAAAX,UAAA,CAAAQ,IAAA,GACA;;MAEA;MACA,SAAAH,iBAAA,CAAAO,MAAA;QACA,KAAAP,iBAAA;MACA;IACA;EACA;EACAQ,QAAA;IACA;IACA,KAAAR,iBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}