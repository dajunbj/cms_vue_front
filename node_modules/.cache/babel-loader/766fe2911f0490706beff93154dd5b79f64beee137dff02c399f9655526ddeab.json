{"ast":null,"code":"import Vue from \"vue\";\nimport Router from \"vue-router\";\n\n// import HomeView from \"../views/HomeView.vue\";\n// import EmployeeListView from \"../views/EmployeeListView.vue\";\n// import SettingView from \"../views/SettingView.vue\";\n// import LoginView from \"../views/LoginView.vue\";\n\nimport axios from 'axios';\n\n// import routesConfig from \"./routesConfig\";\n\nVue.use(Router);\n\n// 全局Router定義\n// const router = new Router({\n//   mode: \"history\",\n//   routes: [\n//     { path: \"/\", redirect: \"/login\" },\n//     { path: \"/login\", name: \"Login\", component: LoginView },\n//     { path: \"/home\", name: \"Home\", component: HomeView, meta: { requiresAuth: true } },//当用户导航到某个路由时，Vue Router 会将该路由的 meta 数据绑定到导航守卫的 to 参数上\n//     { path: \"/employee\", name: \"User\", component: EmployeeListView, meta: { requiresAuth: true } },\n//     { path: \"/setting\", name: \"Setting\", component: SettingView, meta: { requiresAuth: true } },\n//   ],\n// });\n\nconst router = new Router({\n  mode: \"history\",\n  routes: routesConfig\n});\n\n//全局Routerの追加\nrouter.beforeEach((to, from, next) => {\n  const token = sessionStorage.getItem(\"token\");\n  const tokenExpiration = sessionStorage.getItem(\"tokenExpiration\");\n  const now = new Date().getTime();\n\n  // 現在の画面がToken検証対象かどうかを判定する\n  if (to.meta.requiresAuth) {\n    // Token有効期間チェック\n    if (!token || tokenExpiration && now > tokenExpiration) {\n      alert(\"登录状态已过期，请重新登录\");\n      sessionStorage.clear(); // sessionStorageをクリアする\n      return next(\"/login\"); // ログインせずにシステムの画面へアクセスしたい場合、直接にログイン画面へアクセスする\n    }\n\n    // Token検証\n    try {\n      axios.get(\"/auth/verify\", {\n        headers: {\n          Authorization: ` ${token}`\n        }\n      });\n      next(); // Token有効、次の画面へ遷移する\n    } catch (error) {\n      alert(\"Token 無効\");\n      sessionStorage.clear();\n      next(\"/login\");\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","Router","axios","use","router","mode","routes","routesConfig","beforeEach","to","from","next","token","sessionStorage","getItem","tokenExpiration","now","Date","getTime","meta","requiresAuth","alert","clear","get","headers","Authorization","error"],"sources":["D:/soft/workspace/cms_vue_front/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport Router from \"vue-router\";\r\n\r\n// import HomeView from \"../views/HomeView.vue\";\r\n// import EmployeeListView from \"../views/EmployeeListView.vue\";\r\n// import SettingView from \"../views/SettingView.vue\";\r\n// import LoginView from \"../views/LoginView.vue\";\r\n\r\nimport axios from 'axios';\r\n\r\n// import routesConfig from \"./routesConfig\";\r\n\r\nVue.use(Router);\r\n\r\n// 全局Router定義\r\n// const router = new Router({\r\n//   mode: \"history\",\r\n//   routes: [\r\n//     { path: \"/\", redirect: \"/login\" },\r\n//     { path: \"/login\", name: \"Login\", component: LoginView },\r\n//     { path: \"/home\", name: \"Home\", component: HomeView, meta: { requiresAuth: true } },//当用户导航到某个路由时，Vue Router 会将该路由的 meta 数据绑定到导航守卫的 to 参数上\r\n//     { path: \"/employee\", name: \"User\", component: EmployeeListView, meta: { requiresAuth: true } },\r\n//     { path: \"/setting\", name: \"Setting\", component: SettingView, meta: { requiresAuth: true } },\r\n//   ],\r\n// });\r\n\r\nconst router = new Router({\r\n  mode: \"history\",\r\n  routes: routesConfig,\r\n});\r\n\r\n//全局Routerの追加\r\nrouter.beforeEach((to, from, next) => {\r\n  \r\n  const token = sessionStorage.getItem(\"token\");\r\n  const tokenExpiration = sessionStorage.getItem(\"tokenExpiration\");\r\n  const now = new Date().getTime();\r\n\r\n  // 現在の画面がToken検証対象かどうかを判定する\r\n  if (to.meta.requiresAuth) {\r\n    // Token有効期間チェック\r\n    if (!token || (tokenExpiration && now > tokenExpiration)) {\r\n      alert(\"登录状态已过期，请重新登录\");\r\n      sessionStorage.clear(); // sessionStorageをクリアする\r\n      return next(\"/login\"); // ログインせずにシステムの画面へアクセスしたい場合、直接にログイン画面へアクセスする\r\n    }\r\n\r\n    // Token検証\r\n    try {\r\n       axios.get(\"/auth/verify\", {\r\n        headers: { Authorization: ` ${token}` },\r\n      });\r\n      next(); // Token有効、次の画面へ遷移する\r\n    } catch (error) {\r\n      alert(\"Token 無効\");\r\n      sessionStorage.clear();\r\n      next(\"/login\"); \r\n    }\r\n\r\n  } else {\r\n      next();\r\n  }\r\n});\r\n\r\nexport default router;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,MAAM,MAAM,YAAY;;AAE/B;AACA;AACA;AACA;;AAEA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;;AAEAF,GAAG,CAACG,GAAG,CAACF,MAAM,CAAC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,MAAM,GAAG,IAAIH,MAAM,CAAC;EACxBI,IAAI,EAAE,SAAS;EACfC,MAAM,EAAEC;AACV,CAAC,CAAC;;AAEF;AACAH,MAAM,CAACI,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAEpC,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EAC7C,MAAMC,eAAe,GAAGF,cAAc,CAACC,OAAO,CAAC,iBAAiB,CAAC;EACjE,MAAME,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;;EAEhC;EACA,IAAIT,EAAE,CAACU,IAAI,CAACC,YAAY,EAAE;IACxB;IACA,IAAI,CAACR,KAAK,IAAKG,eAAe,IAAIC,GAAG,GAAGD,eAAgB,EAAE;MACxDM,KAAK,CAAC,eAAe,CAAC;MACtBR,cAAc,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;MACxB,OAAOX,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzB;;IAEA;IACA,IAAI;MACDT,KAAK,CAACqB,GAAG,CAAC,cAAc,EAAE;QACzBC,OAAO,EAAE;UAAEC,aAAa,EAAE,IAAIb,KAAK;QAAG;MACxC,CAAC,CAAC;MACFD,IAAI,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdL,KAAK,CAAC,UAAU,CAAC;MACjBR,cAAc,CAACS,KAAK,CAAC,CAAC;MACtBX,IAAI,CAAC,QAAQ,CAAC;IAChB;EAEF,CAAC,MAAM;IACHA,IAAI,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAEF,eAAeP,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}