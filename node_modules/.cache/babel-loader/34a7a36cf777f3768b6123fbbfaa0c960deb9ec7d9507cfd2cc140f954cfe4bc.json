{"ast":null,"code":"import Vue from \"vue\";\nimport Router from \"vue-router\";\nimport HomeView from \"../views/HomeView.vue\";\nimport EmployeeListView from \"../views/EmployeeListView.vue\";\nimport SettingView from \"../views/SettingView.vue\";\nimport LoginView from \"../views/LoginView.vue\";\nVue.use(Router);\n\n// 全局Router定義\nconst router = new Router({\n  mode: \"history\",\n  routes: [{\n    path: \"/\",\n    redirect: \"/login\"\n  }, {\n    path: \"/login\",\n    name: \"Login\",\n    component: LoginView\n  }, {\n    path: \"/home\",\n    name: \"Home\",\n    component: HomeView,\n    meta: {\n      requiresAuth: true\n    }\n  },\n  //当用户导航到某个路由时，Vue Router 会将该路由的 meta 数据绑定到导航守卫的 to 参数上\n  {\n    path: \"/employee\",\n    name: \"User\",\n    component: EmployeeListView,\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: \"/setting\",\n    name: \"Setting\",\n    component: SettingView,\n    meta: {\n      requiresAuth: true\n    }\n  }]\n});\n\n// 全局Routerの追加\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = !!sessionStorage.getItem(\"token\"); // 假设通过 token 判断登录状态\n\n  const token = sessionStorage.getItem(\"token\");\n  const tokenExpiration = sessionStorage.getItem(\"tokenExpiration\");\n  const now = new Date().getTime();\n\n  // 現在の画面がToken検証対象かどうかを判定する\n  if (to.meta.requiresAuth) {\n    // Token有効期間チェック\n    if (!token || tokenExpiration && now > tokenExpiration) {\n      alert(\"登录状态已过期，请重新登录\");\n      sessionStorage.clear(); // sessionStorageをクリアする\n      return next(\"/login\"); // ログインせずにシステムの画面へアクセスしたい場合、直接にログイン画面へアクセスする\n    }\n\n    // Token検証\n    try {\n      axios.get(\"/auth/verify\", {\n        headers: {\n          Authorization: ` ${token}`\n        }\n      });\n      next(); // Token有効、次の画面へ遷移する\n    } catch (error) {\n      alert(\"Token 無効\");\n      sessionStorage.clear();\n      next(\"/login\");\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","Router","HomeView","EmployeeListView","SettingView","LoginView","use","router","mode","routes","path","redirect","name","component","meta","requiresAuth","beforeEach","to","from","next","isAuthenticated","sessionStorage","getItem","token","tokenExpiration","now","Date","getTime","alert","clear","axios","get","headers","Authorization","error"],"sources":["D:/soft/workspace/cms_vue_front/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport Router from \"vue-router\";\r\nimport HomeView from \"../views/HomeView.vue\";\r\nimport EmployeeListView from \"../views/EmployeeListView.vue\";\r\nimport SettingView from \"../views/SettingView.vue\";\r\nimport LoginView from \"../views/LoginView.vue\";\r\n\r\nVue.use(Router);\r\n\r\n// 全局Router定義\r\nconst router = new Router({\r\n  mode: \"history\",\r\n  routes: [\r\n    { path: \"/\", redirect: \"/login\" },\r\n    { path: \"/login\", name: \"Login\", component: LoginView },\r\n    { path: \"/home\", name: \"Home\", component: HomeView, meta: { requiresAuth: true } },//当用户导航到某个路由时，Vue Router 会将该路由的 meta 数据绑定到导航守卫的 to 参数上\r\n    { path: \"/employee\", name: \"User\", component: EmployeeListView, meta: { requiresAuth: true } },\r\n    { path: \"/setting\", name: \"Setting\", component: SettingView, meta: { requiresAuth: true } },\r\n  ],\r\n});\r\n\r\n// 全局Routerの追加\r\nrouter.beforeEach((to, from, next) => {\r\n  const isAuthenticated = !!sessionStorage.getItem(\"token\"); // 假设通过 token 判断登录状态\r\n  \r\n  const token = sessionStorage.getItem(\"token\");\r\n  const tokenExpiration = sessionStorage.getItem(\"tokenExpiration\");\r\n  const now = new Date().getTime();\r\n\r\n  // 現在の画面がToken検証対象かどうかを判定する\r\n  if (to.meta.requiresAuth) {\r\n    // Token有効期間チェック\r\n    if (!token || (tokenExpiration && now > tokenExpiration)) {\r\n      alert(\"登录状态已过期，请重新登录\");\r\n      sessionStorage.clear(); // sessionStorageをクリアする\r\n      return next(\"/login\"); // ログインせずにシステムの画面へアクセスしたい場合、直接にログイン画面へアクセスする\r\n    }\r\n\r\n    // Token検証\r\n    try {\r\n       axios.get(\"/auth/verify\", {\r\n        headers: { Authorization: ` ${token}` },\r\n      });\r\n      next(); // Token有効、次の画面へ遷移する\r\n    } catch (error) {\r\n      alert(\"Token 無効\");\r\n      sessionStorage.clear();\r\n      next(\"/login\"); \r\n    }\r\n\r\n  } else {\r\n      next();\r\n  }\r\n});\r\n\r\nexport default router;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,MAAM,MAAM,YAAY;AAC/B,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,gBAAgB,MAAM,+BAA+B;AAC5D,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,SAAS,MAAM,wBAAwB;AAE9CL,GAAG,CAACM,GAAG,CAACL,MAAM,CAAC;;AAEf;AACA,MAAMM,MAAM,GAAG,IAAIN,MAAM,CAAC;EACxBO,IAAI,EAAE,SAAS;EACfC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE;EAAS,CAAC,EACjC;IAAED,IAAI,EAAE,QAAQ;IAAEE,IAAI,EAAE,OAAO;IAAEC,SAAS,EAAER;EAAU,CAAC,EACvD;IAAEK,IAAI,EAAE,OAAO;IAAEE,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEX,QAAQ;IAAEY,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK;EAAE,CAAC;EAAC;EACnF;IAAEL,IAAI,EAAE,WAAW;IAAEE,IAAI,EAAE,MAAM;IAAEC,SAAS,EAAEV,gBAAgB;IAAEW,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK;EAAE,CAAC,EAC9F;IAAEL,IAAI,EAAE,UAAU;IAAEE,IAAI,EAAE,SAAS;IAAEC,SAAS,EAAET,WAAW;IAAEU,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK;EAAE,CAAC;AAE/F,CAAC,CAAC;;AAEF;AACAR,MAAM,CAACS,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,eAAe,GAAG,CAAC,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE3D,MAAMC,KAAK,GAAGF,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EAC7C,MAAME,eAAe,GAAGH,cAAc,CAACC,OAAO,CAAC,iBAAiB,CAAC;EACjE,MAAMG,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;;EAEhC;EACA,IAAIV,EAAE,CAACH,IAAI,CAACC,YAAY,EAAE;IACxB;IACA,IAAI,CAACQ,KAAK,IAAKC,eAAe,IAAIC,GAAG,GAAGD,eAAgB,EAAE;MACxDI,KAAK,CAAC,eAAe,CAAC;MACtBP,cAAc,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;MACxB,OAAOV,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACzB;;IAEA;IACA,IAAI;MACDW,KAAK,CAACC,GAAG,CAAC,cAAc,EAAE;QACzBC,OAAO,EAAE;UAAEC,aAAa,EAAE,IAAIV,KAAK;QAAG;MACxC,CAAC,CAAC;MACFJ,IAAI,CAAC,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdN,KAAK,CAAC,UAAU,CAAC;MACjBP,cAAc,CAACQ,KAAK,CAAC,CAAC;MACtBV,IAAI,CAAC,QAAQ,CAAC;IAChB;EAEF,CAAC,MAAM;IACHA,IAAI,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAEF,eAAeZ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}